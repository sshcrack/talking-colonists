import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "com.modrinth.minotaur" version "2+"
    id 'net.darkhax.curseforgegradle' version '1.1+'
}

jarJar.enable()

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Forge recommends Java 17 for 1.20.1
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    // This property enables access transformers for use in development.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        configureEach {
            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect {
                    it.absolutePath
                }.join(File.pathSeparator)
            }
        }

        client {
            workingDirectory project.file('run_forge')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            //programArgument '--nogui'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
    library
    implementation.extendsFrom(library)
}

repositories {
    mavenLocal()

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }

    maven {
        name 'LDTTeam - Mods Maven'
        url 'https://ldtteam.jfrog.io/ldtteam/mods-maven/'
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

//jarJar {
//    dependencies {
//        exclude(dependency('org.slf4j:slf4j-api'))
//    }
//}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"
    runtimeOnly fg.deobf("maven.modrinth:simple-voice-chat:forge-${voicechat_version}")

    implementation fg.deobf("com.ldtteam:minecolonies:${minecolonies_version}")
    runtimeOnly fg.deobf("com.ldtteam:domum_ornamentum:${domum_version}")
    runtimeOnly fg.deobf("com.ldtteam:structurize:${structurize_version}")
    runtimeOnly fg.deobf("com.ldtteam:blockui:${blockui_version}")

//    implementation(group: 'org.java-websocket', name: 'Java-WebSocket', version: '[1.5,)') {
//        transitive = false
//        jarJar.pin(it, "1.6.0")
//    }

    jarJar(group: 'org.java-websocket', name: 'Java-WebSocket', version: '[1.5,)')
    library (group: 'org.java-websocket', name: 'Java-WebSocket', version: '[1.5,)') {
        jarJar.pin(it, "1.6.0")
    }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            voicechat_version      : voicechat_version,
            minecolonies_version   : minecolonies_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

void addLicense(jarTask) {
    jarTask.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

addLicense(jar)
addLicense(tasks.jarJar)


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

def localProperties = new Properties()
def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def modrinth_key = localProperties.getProperty('MODRINTH_API_KEY') ?: ""
def curse_key = localProperties.getProperty('CURSEFORGE_API_KEY') ?: ""

// Place modrinth block at the very end to ensure all properties are loaded and plugin is applied
modrinth {
    token = modrinth_key
    projectId = 'QJvWFsra'
    uploadFile = jar.archiveFile
    versionType = "beta"
    loaders = ["forge"]
    gameVersions = [minecraft_version]
    changelog = "For a changelog take a look at https://github.com/sshcrack/talking-colonists/"
    syncBodyFrom = rootProject.file("README.md").text
    dependencies {
        required.project "simple-voice-chat"
    }
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = curse_key
    disableVersionDetection()

    def mainFile = upload(curseforge_project, jar)
    mainFile.displayName = "[${project.name.capitalize()} forge - [${minecraft_version}] ${project.version}"
    mainFile.addModLoader("forge")
    mainFile.releaseType = "beta"
    mainFile.addEnvironment("client", "server")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addRequirement("simple-voice-chat")
    mainFile.addRequirement("minecolonies")
    mainFile.changelog = "For a changelog take a look at https://github.com/sshcrack/talking-colonists/"
}

tasks.register("publishAll")

tasks.publishAll.dependsOn(tasks.modrinth)
tasks.publishAll.dependsOn(tasks.publishCurseForge)
